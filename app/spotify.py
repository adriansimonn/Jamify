import requests
from flask import current_app

def searchForPlaylists(accessToken, keywords):
    searchURL = "https://api.spotify.com/v1/search"
    headers = {"Authorization": f"Bearer {accessToken}"}
    playlists = []
    for k in keywords:
        parameters = {"q": k, "type": "playlist", "limit": 5}
        try:
            response = requests.get(searchURL, headers=headers, params=parameters)
        except Exception as e:
            print("Failed to fetch playlists as an exception has occurred: {e}")
            return None
        if response.status_code == 200:
            playlists.extend(response.json().get("playlists", {}).get("items", []))
        else:
            print("Error with Spotify API")
            return None
    return playlists

def getPotentialTracks(accessToken, playlists, numSongs, excludeExplicit):
    tracks = {}
    size = min(numSongs, 100)
    for p in playlists:
        if not isinstance(p, dict):  # Check if `p` is a valid playlist dictionary
            print(f"Skipping invalid playlist entry: {p}")
            continue

        playlistID = p.get("id")  # Safely access `id`
        if not playlistID:
            print(f"Skipping playlist with no ID: {p}")
            continue

        tracksURL = f"https://api.spotify.com/v1/playlists/{playlistID}/tracks"
        headers = {"Authorization": f"Bearer {accessToken}"}
        try:
            response = requests.get(tracksURL, headers=headers)
        except Exception as e:
            print("Failed to fetch tracks as an exception has occurred: {e}")
            return None
        if response.status_code == 200:
            for item in response.json().get("items", []):
                track = item.get("track")
                if track:
                    if excludeExplicit and track.get("explicit", False):
                        continue
                    trackID = track.get("id")
                    if trackID:
                        tracks[trackID] = tracks.get(trackID, 0) + 1
        else:
            print(f"Error fetching tracks for playlist {playlistID}: {response.status_code}")
    
    return sorted(tracks, key=tracks.get, reverse=True)[:size]

def getTokenFromCode(code):
    tokenUrl = "https://accounts.spotify.com/api/token"
    apiData = {
        "grant_type": "authorization_code",
        "code": code,
        "redirect_uri": current_app.config['REDIRECT_URI'],
        "client_id": current_app.config['CLIENT_ID'],
        "client_secret": current_app.config['CLIENT_SECRET'],
    }
    response = requests.post(tokenUrl, data=apiData)
    return response.json().get('access_token')

def getUserID(accessToken):
    url = "https://api.spotify.com/v1/me"
    headers = {"Authorization": f"Bearer {accessToken}"}
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        print(f"Error fetching user ID: {response.status_code}, {response.text}")
        return None
    userID = response.json().get("id")
    print(f"Fetched User ID: {userID}")
    return userID


def createTempPlaylist(accessToken, userID):
    url = f"https://api.spotify.com/v1/users/{userID}/playlists"
    headers = {"Authorization": f"Bearer {accessToken}"}
    data = {
        "name": "Generated Playlist",
        "description": "A temporary playlist for previewing. Generated by Jamify",
        "public": False
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 403:
        return "whitelist needed"
    if response.status_code != 201:
        print(f"Error creating playlist: {response.status_code}, {response.text}")
        return None
    playlistID = response.json().get("id")
    print(f"Created Playlist ID: {playlistID}")
    return playlistID

def addTracksToPlaylist(accessToken, playlistID, trackURIs):
    url = f"https://api.spotify.com/v1/playlists/{playlistID}/tracks"
    headers = {"Authorization": f"Bearer {accessToken}"}
    data = {"uris": trackURIs}
    response = requests.post(url, headers=headers, json=data)
    if response.status_code != 201:
        print(f"Error adding tracks to playlist: {response.status_code}, {response.text}")
    else:
        print(f"Tracks added successfully to playlist {playlistID}")

def updatePlaylist(accessToken, playlistID, name, description):
    print(f"Updating playlist - Name: {name}, Description: {description}")  # Debug print
    url = f"https://api.spotify.com/v1/playlists/{playlistID}"
    headers = {
        "Authorization": f"Bearer {accessToken}",
        "Content-Type": "application/json"
    }
    data = {
        "name": name,
        "description": description
    }
    print(f"Update playlist request data: {data}")  # Debug print
    response = requests.put(url, headers=headers, json=data)
    if response.status_code != 200:
        print(f"Error updating playlist: {response.status_code}, {response.text}")
        return False
    return True

def deletePlaylist(accessToken, playlistID):
    """
    Delete a playlist
    """
    url = f"https://api.spotify.com/v1/playlists/{playlistID}/followers"
    headers = {"Authorization": f"Bearer {accessToken}"}
    response = requests.delete(url, headers=headers)
    if response.status_code != 200:
        print(f"Error deleting playlist: {response.status_code}, {response.text}")
        return False
    return True